name: CI/CD

on:
  push:
    branches:
      - develop
      - main
      # - 'release/*'
    tags:
      - prd-v*
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install NodeJS for serverless framework
        uses: actions/setup-node@v2
        with:
          node-version: "20.3.0"

      - name: Change directory to backend
        run: cd backend

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Installing Serverless framework and plugins
        run: make serverless
        working-directory: ./backend

      - name: Installing dependencies
        run: make deps
        working-directory: ./backend

      - name: Static code analysis (sorting imports using isort)
        run: make isort
        working-directory: ./backend

      - name: Static code analysis (check code formatting using black)
        run: make black
        working-directory: ./backend

      - name: Static code analysis (flake8 tool)
        run: make lint
        working-directory: ./backend

      - name: Code security checkings (bandit tool)
        run: make security
        working-directory: ./backend

      - name: Unit tests
        run: make unittest
        working-directory: ./backend

      # - name: Code coverage
      #   run: make cov
      #   working-directory: ./backend

      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}
        working-directory: ./backend

      - name: Deploy
        run: make deploy
        working-directory: ./backend
        env:
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          CLIENT_ORIGIN_URL: ${{ secrets.CLIENT_ORIGIN_URL }}
          AWS_KEY: ${{ secrets.AWS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}

      # - name: End to End Tests
      #   run: make e2e-tests
      #   working-directory: ./backend

      # - name: Load tests
      #   run: make load-tests
      #   working-directory: ./backend

      # - name: Destroy
      #   run: make destroy
      #   working-directory: ./backend
